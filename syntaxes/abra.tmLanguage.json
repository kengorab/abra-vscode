{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Abra",
  "patterns": [{ "include": "#code" }],
  "repository": {
    "code": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#statement" },
        { "include": "#keyword" }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.double-slash.abra",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.abra",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "declaration": {
      "patterns": [
        { "include": "#decorator" },
        { "include": "#func-decl" },
        { "include": "#var-decl" },
        { "include": "#type-decl" },
        { "include": "#decorator-decl" },
        { "include": "#trait-decl" },
        { "include": "#enum-decl" }
      ]
    },
    "statement": {
      "patterns": [
        { "include": "#declaration" },
        { "include": "#expression" }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#keyword" },
        { "include": "#string" },
        { "include": "#char" },
        { "include": "#number" },
        { "include": "#func-call" },
        { "include": "#match-expr" },
        { "include": "#identifier" }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.control.abra",
          "match": "\\b(if|else|while|for|in|break|continue|match|return|import|from|as|export|try)\\b"
        },
        {
          "name": "storage.type.abra",
          "match": "\\b(type|enum|decorator|trait|func|val|var|self|true|false|None|pub)\\b"
        },
        {
          "name": "keyword.control.abra",
          "begin": "\\b(todo|unreachable)",
          "end": "\\W",
          "beginCaptures": {
            "1": {
              "name": "markup.italic.abra"
            }
          }
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.abra",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.abra",
          "match": "\\\\."
        }
      ]
    },
    "char": {
      "name": "string.quoted.single.abra",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.abra",
          "match": "\\\\."
        }
      ]
    },
    "number": {
      "name": "constant.numeric.abra",
      "match": "\\b([0-9]+\\.?[0-9]*)\\b"
    },
    "identifier": {
      "patterns": [
        {
          "include": "#keyword"
        },
        {
          "name": "entity.name.variable.abra",
          "match": "([_a-zA-Z][a-zA-Z0-9_]*)"
        }
      ]
    },
    "func-args": {
      "patterns": [
        {
          "name": "storage.type.abra",
          "match": "\\bself\\b"
        },
        {
          "name": "punctuation.separator.delimiter.abra",
          "match": ","
        },
        { "include": "#expression" }
      ]
    },
    "func-call": {
      "patterns": [
        {
          "name": "meta.function.call.abra",
          "begin": "([a-z_][a-zA-Z0-9_]*)\\(",
          "end": "\\)",
          "beginCaptures": { "1": { "name": "entity.name.function.abra" } },
          "patterns": [{ "include": "#func-args" }]
        },
        {
          "name": "meta.function.invocation.abra",
          "begin": "([A-Z][a-zA-Z0-9_]*)\\(",
          "end": "\\)",
          "beginCaptures": { "1": { "name": "entity.name.type.abra" } },
          "patterns": [{ "include": "#func-args" }]
        }
      ]
    },
    "match-expr": {
      "name": "meta.match.abra",
      "begin": "\\b(match)\\b",
      "end": "\\}",
      "beginCaptures": { "1": { "name": "keyword.control.abra" } },
      "patterns": [
        {
          "begin": "([_A-Z][a-zA-Z0-9_]*)(\\s+([_a-zA-Z][a-zA-Z0-9_]*))?",
          "end": "(=>)",
          "beginCaptures": {
            "1": { "name": "entity.name.type.abra" }
          },
          "endCaptures": {
            "0": { "name": "storage.type.function.arrow.abra" }
          },
          "patterns": [{ "include": "#code" }]
        },
        {
          "begin": "(?<==>\\s*)\\{",
          "end": "\\}",
          "patterns": [{ "include": "#code" }]
        },
        { "include": "#code" }
      ]
    },
    "type-ident": {
      "name": "meta.type.name.abra",
      "patterns": [
        {
          "match": "([A-Z][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "entity.name.type.abra" }
          }
        },
        {
          "begin": "\\(|<",
          "end": "\\)|>",
          "patterns": [
            {
              "name": "punctuation.separator.delimiter.abra",
              "match": ","
            },
            { "include": "#type-ident" }
          ]
        },
        {
          "name": "storage.type.function.arrow.abra",
          "match": "=>"
        }
      ]
    },
    "type-argument-list-decl": {
      "name": "meta.arguments.type.abra",
      "begin": "<",
      "end": ">",
      "patterns": [
        {
          "name": "entity.name.type.abra",
          "match": "[A-Z][a-zA-Z0-9_]*"
        }
      ]
    },
    "func-params": {
      "name": "meta.parameters.abra",
      "begin": "\\(",
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "storage.type.abra",
          "match": "\\bself\\b"
        },
        {
          "name": "entity.name.variable.abra",
          "match": "[a-z][a-zA-Z0-9_]*"
        },
        { "include": "#type-ident" },
        {
          "name": "punctuation.separator.delimiter.abra",
          "match": ","
        },
        { "include": "#expression" }
      ]
    },
    "decorator": {
      "begin": "(@[A-Za-z][a-zA-Z0-9_]+)",
      "end": "\\s",
      "beginCaptures": {
          "1": { "name": "entity.name.type.decorator.abra" }
      },
      "patterns": [
        { "include": "#string" },
        { "include": "#number" }
      ]
    },
    "func-decl-sig": {
      "name": "meta.function.abra",
      "begin": "\\b(func)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
      "end": "(?==)|(?=\\{)|$",
      "beginCaptures": {
        "1": { "name": "storage.type.abra" },
        "2": { "name": "entity.name.function" }
      },
      "patterns": [
        { "include": "#type-argument-list-decl" },
        { "include": "#func-params" },
        { "include": "#type-ident" }
      ]
    },
    "func-decl": {
      "name": "meta.function.abra",
      "patterns": [
        { "include": "#func-decl-sig" },
        {
          "name": "meta.function.body.abra",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            { "include": "#code" }
          ]
        },
        {
          "name": "meta.function.expr.abra",
          "begin": "=",
          "end": "(?=pub|func|type|enum|val|var|\\})",
          "patterns": [
            { "include": "#code" }
          ]
        }
      ]
    },
    "var-decl": {
      "name": "meta.definition.variable.abra",
      "patterns": [
        {
          "begin": "(val|var)\\s+([a-z][a-zA-Z0-9_]*)\\s*",
          "end": "=|\n",
          "beginCaptures": {
            "1": { "name": "storage.type.abra" },
            "2": { "name": "variable.other.readwrite.abra" }
          },
          "patterns": [
            { "include": "#type-ident" }
          ]
        }
      ]
    },
    "field": {
      "name": "meta.field.abra",
      "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
      "beginCaptures": {
        "1": { "name": "entity.name.variable.abra" }
      },
      "end": ",|$",
      "patterns": [
        { "include": "#keyword" },
        {
          "name": "punctuation.separator.delimiter.abra",
          "match": "="
        },
        { "include": "#type-ident" },
        { "include": "#expression" }
      ]
    },
    "type-decl-sig": {
      "name": "meta.definition.type.abra",
      "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)",
      "end": "(?=\\{)",
      "beginCaptures": {
        "1": { "name": "entity.name.type.abra" }
      },
      "patterns": [
        { "include": "#type-argument-list-decl" }
      ]
    },
    "type-decl": {
      "name": "meta.definition.type.abra",
      "begin": "\\b(type)\\b",
      "beginCaptures": {
        "1": { "name": "storage.type.abra" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#type-decl-sig" },
        {
          "name": "meta.definition.type.body.abra",
          "begin": "\\{",
          "end": "(?=\\})",
          "patterns": [
            {
              "name": "storage.type.abra",
              "match": "\\b(pub)\\b"
            },
            { "include": "#comment" },
            { "include": "#field" },
            { "include": "#func-decl" }
          ]
        }
      ]
    },
    "decorator-decl": {
      "name": "meta.definition.decorator.abra",
      "begin": "\\b(decorator)\\b",
      "beginCaptures": {
        "1": { "name": "storage.type.abra" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#type-decl-sig" },
        {
          "name": "meta.definition.decorator.body.abra",
          "begin": "\\{",
          "end": "(?=\\})",
          "patterns": [
            {
              "name": "storage.type.abra",
              "match": "\\b(pub)\\b"
            },
            { "include": "#comment" },
            { "include": "#field" },
            { "include": "#func-decl" }
          ]
        }
      ]
    },
    "trait-decl": {
      "name": "meta.definition.trait.abra",
      "begin": "\\b(trait)\\b",
      "beginCaptures": {
        "1": { "name": "storage.type.abra" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#type-decl-sig" },
        {
          "name": "meta.definition.trait.body.abra",
          "begin": "\\{",
          "end": "(?=\\})",
          "patterns": [
            {
              "name": "storage.type.abra",
              "match": "\\b(pub)\\b"
            },
            { "include": "#comment" },
            { "include": "#func-decl" },
            { "include": "#func-decl-sig" }
          ]
        }
      ]
    },
    "enum-decl": {
      "name": "meta.definition.enum.abra",
      "begin": "\\b(enum)\\b",
      "beginCaptures": {
        "1": { "name": "storage.type.abra" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#type-decl-sig" },
        {
          "name": "meta.definition.enum.body.abra",
          "begin": "\\{",
          "end": "(?=\\})",
          "patterns": [
            { "include": "#comment" },
            {
              "name": "meta.definition.enum.variant.constructor.abra",
              "begin": "([A-Z][a-zA-Z0-9_]*)(?=\\()",
              "end": "\\)",
              "beginCaptures": {
                "1": { "name": "variable.other.variant.abra" }
              },
              "patterns": [
                { "include": "#func-params" }
              ]
            },
            {
              "name": "meta.definition.enum.variant.constant.abra",
              "match": "([A-Z][a-zA-Z0-9_]*)",
              "captures": {
                "1": { "name": "variable.other.variant.abra" }
              }
            },
            {
              "name": "storage.type.abra",
              "match": "\\b(pub)\\b"
            },
            { "include": "#func-decl" }
          ]
        }
      ]
    }
  },
  "scopeName": "source.abra"
}