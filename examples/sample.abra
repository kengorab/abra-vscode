import expect from test
import abcd from .sample2

func abc(
  b: String[],
  fn: (Int) => Int
): Int {
  return 0.45.round()
}

// val a: Int = "asdf"
// var a: Int[] = [
//   "a",
//   "5"
// ]
val [a, b] = [1, 2, 3]

export func def(s = "asdf"): (String, String) = (s, s)
// val x = a(a, b, c)

type Person {
  name: String readonly

  func _toString(self): String {
    println("hello")
    "Person(name: " + self.name + ")"
  }
}
val p = Person(name: "Ken").name

enum Direction {
  Up(amt: Int)
  Down(amt: Int)

  // func toString(self): String {
  //   "Person(name: " + self.name + ")"
  // }
}

val x: Int? = 3
val y = if x |x| {
  val p = abc([], i => i)
  p
} else {
  None
}

while x |x| {
  val p = abc([], i => i)
  break
}

for x in range(0, 9) {
  val p = abc([], i => i)
}

val hhh: String | Int = "asdf"
val q = match hhh {
  String s => {
    println(s)
    3
  }
  Int i => {
    println(i)
    i
  }
}

val d: Direction = Direction.Up(amt: 12)
match d {
  Direction.Up(amt) d => { println(d) },
  Direction.Down d => println(d)
}

match evalAst(_input, env) {
  EvalResult.Ok(v) => match v {
    Value.List(values) => {
      val [fn, *args] = values
      match fn {
        Value.BuiltinFn(fn) => fn(args)
        Value.Fn(body, params, fnEnv, _) => {
          fnEnv.initFnEnv(params, args)
          input = body
          env = fnEnv
          continue
        }
        _ v => EvalResult.Err(error: "asdf")
        None => EvalResult.Err(error: "Unreachable")
      }
    }
    Y => EvalResult.Err(error: "Unreachable?")
  }
  EvalResult.Err e => { return e }
}

// val s: Map<String, Int[]> = {
//   a: [123],
//   b: ["asdf".length]
// }           //
val hhh: Set<Int> = #{1, 2, 3} // this is a comment
/* this is a block
comment */

// val a /* this is an inline comment */: Int = 123
// TODO: This doesn't work ^

